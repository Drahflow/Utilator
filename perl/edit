#!/usr/bin/perl

use strict;
use warnings;
use encoding 'utf-8';

use Global qw(/./);
use Query qw(/./);
use Data::Dumper;
use Date::Parse;

my $task = Query::resolveTask($ARGV[0]) or die help();
print Dumper($task);

my $what = $ARGV[1] or die help();

my $now = iso_full_date(time);

my $gid = $task->{'gid'};

if($what eq 'done') {
  enterLocations();
  applyExpectationEffects();

  if(not $task->{'recurring'}) {
    dbh()->do(<<EOSQL, {}, $now, $now, $gid);
    UPDATE task SET status = 100, last_edit = ?, closed_at = ? WHERE gid = ?
EOSQL
  }
} elsif($what eq 'enter') {
  enterLocations();
} elsif($what eq 'status') {
  my $new = $ARGV[2];
  die help() unless defined $new;

  dbh()->do(<<EOSQL, {}, $new, $now, $gid);
  UPDATE task SET status = ?, last_edit = ?, closed_at = NULL WHERE gid = ?
EOSQL
} elsif($what eq 'est') {
  my $new = interpretUnit($ARGV[2]) or die help();

  dbh()->do(<<EOSQL, {}, $new, $now, $gid);
  UPDATE task SET seconds_estimate = ?, last_edit = ? WHERE gid = ?
EOSQL
} elsif($what eq 'title') {
  my $new = $ARGV[2] or die help();

  dbh()->do(<<EOSQL, {}, $new, $now, $gid);
  UPDATE task SET title = ?, last_edit = ? WHERE gid = ?
EOSQL
} elsif($what eq 'desc') {
  my $new = $ARGV[2] or die help();

  dbh()->do(<<EOSQL, {}, $new, $now, $gid);
  UPDATE task SET description = ?, last_edit = ? WHERE gid = ?
EOSQL
} elsif($what eq 'pub') {
  my $new = $ARGV[2] or die help();

  my %map = (
    'L' => PUBLICATION_LOCAL(),
    'P' => PUBLICATION_PRIVATE(),
    'M' => PUBLICATION_MASKED(),
    'T' => PUBLICATION_TRANSPARENCY(),
    'O' => PUBLICATION_OFFER(),
  );
  die help() unless(exists $map{$new});

  $new = $map{$new};

  dbh()->do(<<EOSQL, {}, $new, $now, $gid);
  UPDATE task SET publication = ?, last_edit = ? WHERE gid = ?
EOSQL
} elsif($what eq 'util') {
  my $new = $ARGV[2] or die help();

  dbh()->do(<<EOSQL, {}, $gid, "0constant:" . int($new * 1000));
  DELETE FROM task_utility WHERE task = (SELECT id FROM task WHERE gid = ?)
EOSQL
  dbh()->do(<<EOSQL, {}, $gid, "0constant:" . int($new * 1000));
  INSERT INTO task_utility (task, distribution) VALUES ((SELECT id FROM task WHERE gid = ?), ?)
EOSQL

  dbh()->do(<<EOSQL, {}, $now, $gid);
  UPDATE task SET last_edit = ? WHERE gid = ?
EOSQL
} elsif($what eq 'wait_until') {
  my $end = str2time($ARGV[2]) or die help();
  enwaitTask($task, $end);
} elsif($what eq 'wait') {
  my $delta = $ARGV[2] or die help();
  enwaitTask($task, time + interpretUnitExact($delta));
} elsif($what eq 'recurring') {
  my $yes = $ARGV[2];
  die help() unless $yes eq '1' or $yes eq '0';

  dbh()->do(<<EOSQL, {}, $yes, $gid);
  UPDATE task SET recurring = ? WHERE gid = ?
EOSQL
} elsif($what eq 'loc') {
  my @rows = @{dbh()->selectall_arrayref(<<EOSQL, { Slice => {} }, $ARGV[2])};
  SELECT * FROM space_active WHERE name = ?
EOSQL
  die "no such location '$ARGV[2]'" unless @rows;

  dbh()->do(<<EOSQL, {}, $gid, $ARGV[2]);
  DELETE FROM task_likelyhood_space
  WHERE task = (SELECT id FROM task WHERE gid = ?)
    AND distribution IN (SELECT name FROM space_active WHERE dimension = (SELECT dimension FROM space_active WHERE name = ?))
EOSQL
  dbh()->do(<<EOSQL, {}, $gid, $ARGV[2]);
  INSERT INTO task_likelyhood_space (task, distribution) VALUES ((SELECT id FROM task WHERE gid = ?), ?)
EOSQL
} elsif($what eq 'eff') {
  my $expectation = Query::resolveExpectation($ARGV[2]) or die help();
  my $what2 = $ARGV[3] or die help();

  if($what2 eq 'del') {
    dbh()->do(<<EOSQL, {}, $task->{'id'}, $expectation->{'id'});
    DELETE FROM task_effect WHERE task = ? AND expectation = ?
EOSQL
  } elsif($what2 eq 'reset') {
    dbh()->do(<<EOSQL, {}, $task->{'id'}, $expectation->{'id'});
    INSERT INTO task_effect (task, expectation, effect) VALUES (?, ?, '0set:0')
EOSQL
  } else {
    die help();
  }
} else {
  die help();
}

dbh()->do(<<EOSQL, {}, $gid);
UPDATE task_edit_last SET gid = ?
EOSQL
print "edited: $gid\n";

sub help {
  return <<EOTXT
./edit <task gid / 'c'> <...>
  done                     - complete task
  enter                    - enter all locations associated with task
  wait <time>              - task impossible for the next <time>
  wait_until <date>        - task impossible until specified <date>
  est <time>               - set new time estimate
  title <title>            - set new title
  desc <description>       - set new description
  util <utility>           - set new (constant) utility
  pub [L|P|M|T|O]          - set new publication state: Local, Private, Masked, Transparent, Offer
  loc <location>           - add a location dependency, only one per dimension
  eff <gid / title> del    - removes all effects on given expectation
  eff <gid / title> reset  - add an expectation effect, namely full reset
  recurring [0|1]          - resets/sets task as recurring
EOTXT
}

sub enwaitTask {
  my ($task, $end) = @_;

  my @likelyhood_time = @{dbh()->selectall_arrayref(<<EOSQL, { Slice => {} }, $gid)};
  SELECT l.distribution, l.task FROM task_likelyhood_time l JOIN task t ON t.id = l.task WHERE t.gid = ?
EOSQL

  if(not @likelyhood_time) {
    dbh()->do(<<EOSQL, {}, $gid, "0constant:990");
    INSERT INTO task_likelyhood_time (task, distribution) VALUES ((SELECT id FROM task WHERE gid = ?), ?)
EOSQL
  }

  dbh()->do(<<EOSQL, {}, $gid, "2mulrange:1970-01-01;" . iso_full_date($end) . ";0");
  INSERT INTO task_likelyhood_time (task, distribution) VALUES ((SELECT id FROM task WHERE gid = ?), ?)
EOSQL

  dbh()->do(<<EOSQL, {}, $now, $gid);
  UPDATE task SET last_edit = ? WHERE gid = ?
EOSQL
}

sub enterLocations {
  foreach my $row (@{dbh()->selectall_arrayref(<<EOSQL, { Slice => {} }, $gid)}) {
  SELECT l.distribution, l.task FROM task_likelyhood_space l JOIN task t ON t.id = l.task WHERE t.gid = ?
EOSQL
    dbh()->do(<<EOSQL, {}, $now, $row->{'distribution'});
    UPDATE space_active SET reached_at = ? WHERE name = ?
EOSQL
  }
}

sub applyExpectationEffects {
  my $effects = dbh()->selectall_arrayref(<<EOSQL, { Slice => {} }, $task->{'id'});
  SELECT * FROM task_effect WHERE task = ?
EOSQL

  foreach my $effect (@$effects) {
    if($effect->{'effect'} =~ /.set:(\d+)$/) {
      my $value = $1;
      dbh()->do(<<EOSQL, {}, $value, iso_full_date(time), $effect->{'expectation'});
      UPDATE expectation SET value = ?, last_calculated = ? WHERE id = ?
EOSQL
    } else {
      warn "Unknown expectation effect specified: $effect->{'effect'}";
      return 0;
    }
  }
}
