#!/usr/bin/perl

use strict;
use warnings;
use encoding 'utf-8';

use Global qw(dbh);

dbh()->do(<<EOSQL);
CREATE TABLE task (
  id INTEGER PRIMARY KEY,
  gid BLOB NOT NULL,
  title TEXT,
  description TEXT,
  author BLOB,
  seconds_estimate INTEGER,
  seconds_taken INTEGER,
  status INTEGER,
  closed_at TEXT,
  publication INTEGER,
  last_edit TEXT,
  recurring INTEGER
);
EOSQL

dbh()->do(<<EOSQL);
CREATE TABLE expectation (
  id INTEGER PRIMARY KEY,
  gid BLOB NOT NULL,
  title TEXT,
  author BLOB,
  publication INTEGER,
  value INTEGER,
  last_calculated TEXT
);
EOSQL

dbh()->do(<<EOSQL);
CREATE TABLE task_utility (
  id INTEGER PRIMARY KEY,
  task INTEGER REFERENCES task (id) ON DELETE CASCADE ON UPDATE CASCADE NOT NULL,
  distribution TEXT NOT NULL
);
EOSQL

dbh()->do(<<EOSQL);
CREATE INDEX task_utility_idx ON task_utility (task);
EOSQL

dbh()->do(<<EOSQL);
CREATE TABLE task_likelyhood_time (
  id INTEGER PRIMARY KEY,
  task INTEGER REFERENCES task (id) ON DELETE CASCADE ON UPDATE CASCADE NOT NULL,
  distribution TEXT NOT NULL
);
EOSQL

dbh()->do(<<EOSQL);
CREATE INDEX task_likelyhood_time_idx ON task_likelyhood_time (task);
EOSQL

dbh()->do(<<EOSQL);
CREATE TABLE task_likelyhood_space (
  id INTEGER PRIMARY KEY,
  task INTEGER REFERENCES task (id) ON DELETE CASCADE ON UPDATE CASCADE NOT NULL,
  distribution TEXT NOT NULL
);
EOSQL

dbh()->do(<<EOSQL);
CREATE INDEX task_likelyhood_space_idx ON task_likelyhood_space (task);
EOSQL

dbh()->do(<<EOSQL);
CREATE TABLE space_active (
  id INTEGER PRIMARY KEY,
  dimension TEXT NOT NULL,
  name TEXT NOT NULL,
  reached_at TEXT NOT NULL
);
EOSQL

dbh()->do(<<EOSQL);
CREATE INDEX space_active_name_idx ON space_active (name);
EOSQL

dbh()->do(<<EOSQL);
CREATE TABLE space_topology (
  wherefrom INTEGER NOT NULL,
  whereto INTEGER NOT NULL,
  seconds_estimate INTEGER NOT NULL
);
EOSQL

dbh()->do(<<EOSQL);
CREATE INDEX space_topology_idx ON space_topology (wherefrom, whereto);
EOSQL

dbh()->do(<<EOSQL);
CREATE TABLE task_precondition (
  id INTEGER PRIMARY KEY,
  task INTEGER REFERENCES task (id) ON DELETE CASCADE ON UPDATE CASCADE NOT NULL,
  precondition TEXT NOT NULL
);
EOSQL

dbh()->do(<<EOSQL);
CREATE INDEX task_precondition_idx ON task_precondition (task);
EOSQL

dbh()->do(<<EOSQL);
CREATE TABLE task_effect (
  id INTEGER PRIMARY KEY,
  task INTEGER REFERENCES task (id) ON DELETE CASCADE ON UPDATE CASCADE NOT NULL,
  expectation INTEGER REFERENCES expectation (id) ON DELETE CASCADE ON UPDATE CASCADE NOT NULL,
  effect TEXT NOT NULL
);
EOSQL

dbh()->do(<<EOSQL);
CREATE INDEX task_effect_idx1 ON task_effect (task);
EOSQL

dbh()->do(<<EOSQL);
CREATE INDEX task_effect_idx2 ON task_effect (expectation);
EOSQL

dbh()->do(<<EOSQL);
CREATE TABLE task_external (
  id INTEGER PRIMARY KEY,
  task INTEGER REFERENCES task (id) ON DELETE CASCADE ON UPDATE CASCADE NOT NULL,
  external TEXT
);
EOSQL

dbh()->do(<<EOSQL);
CREATE INDEX task_external_idx ON task_external (task);
EOSQL

# TODO: Table names should be singular
dbh()->do(<<EOSQL);
CREATE TABLE expectation_utilities (
  id INTEGER PRIMARY KEY,
  expectation INTEGER REFERENCES expectation (id) ON DELETE CASCADE ON UPDATE CASCADE NOT NULL,
  distribution TEXT NOT NULL
);
EOSQL

dbh()->do(<<EOSQL);
CREATE INDEX expectation_utilities_idx ON expectation_utilities (expectation);
EOSQL

dbh()->do(<<EOSQL);
CREATE TABLE expectation_derivative (
  id INTEGER PRIMARY KEY,
  expectation INTEGER REFERENCES expectation (id) ON DELETE CASCADE ON UPDATE CASCADE NOT NULL,
  distribution TEXT NOT NULL
);
EOSQL

dbh()->do(<<EOSQL);
CREATE INDEX expectation_derivative_idx ON expectation_derivative (expectation);
EOSQL

dbh()->do(<<EOSQL);
CREATE TABLE task_edit_last (
  gid BLOB
);
EOSQL
dbh()->do(<<EOSQL);
INSERT INTO task_edit_last (gid) VALUES (NULL);
EOSQL

dbh()->disconnect();
