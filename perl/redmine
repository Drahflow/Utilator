#!/usr/bin/perl

use strict;
use warnings;
use encoding 'utf-8';

use Global qw(/./);
use Configuration;

use JSON;
use LWP;
use LWP::UserAgent;
use Digest::SHA qw(sha512_hex);
use XML::Simple;
use Data::Dumper;

my %goodCerts = Settings::getRedmineGoodCerts();
my %names = Settings::getRedmineNames();
my %pullFor = Settings::getRedminePullFor();
my %utilities = Settings::getRedmineUtilities();
my %locations = Settings::getRedmineLocations();


my $project = $ARGV[0] or die help();
my $base = $names{$project} or die "No such project configured: $project";
my $externalBase = 'redmine://' . [$base->{'issues'} =~ m!^https://(.*)$!]->[0];
my $action = $ARGV[1] or die help();
my $key = Secrets::redmineAPIKey($base->{'project'});

my $ua = LWP::UserAgent->new;
$ua->agent("Utilator Redmine Bridge");
$ua->ssl_opts( SSL_verify_mode => 2 );
$ua->ssl_opts( SSL_verify_callback => \&verifyCert );

if($action eq "pull") {
  my @issues;
  my @fetchedIssues;
  my $offset = 0;
  do {
    @fetchedIssues = ();

    my $xml = XMLin(http('GET' => "$base->{'project'}/issues.xml?key=$key&offset=$offset&limit=100"));
    foreach my $key (keys %{$xml->{'issue'}}) {
      push @fetchedIssues, {
        %{$xml->{'issue'}->{$key}},
        'id' => $key,
      };
    }
    push @issues, @fetchedIssues;

    $offset += $xml->{'limit'};
  } while(@fetchedIssues);

  # print Dumper(@issues);

  my $now = iso_full_date(time);

  foreach my $issue (@issues) {
    next if($issue->{'assigned_to'} and not $pullFor{$issue->{'assigned_to'}->{'name'}});
    next if($issue->{'start_date'} gt $now);
    next if($issue->{'status'}->{'name'} eq 'Erledigt');
    next if($issue->{'status'}->{'name'} eq 'Fehlgeschlagen');
    next if(exists $issue->{'category'} and $issue->{'category'}->{'name'} eq 'Info');
    
    my @tasks = @{dbh()->selectall_arrayref(<<EOSQL, { Slice => {} }, $externalBase . '/' . $issue->{'id'})};
    SELECT * FROM task t WHERE EXISTS (SELECT 1 FROM task_external e WHERE e.task = t.id AND e.external = ?) AND t.status < 100
EOSQL

    if(@tasks) {
      my $task = $tasks[0];

      next if $task->{'last_edit'} ge $issue->{'updated_on'};

      my $title = $task->{'title'};
      my $utility = $utilities{$project . '.' . $issue->{'priority'}->{'name'}};
      my $seconds_estimate = (ref $issue->{'estimated_hours'} ne 'HASH')? $issue->{'estimated_hours'} * 3600: undef;
      my $status = $issue->{'done_ratio'};

      if($status < 0 or $status >= 100) {
        $status = 0;
      }

      if(not defined $seconds_estimate) {
        $title .= ': Zeitsch채tzung';
        $seconds_estimate = 60;
      }

      if(not defined $utility) {
        $title = "Utilator: Redmine-Utility-Definition f체r '" . $project . '.' . $issue->{'priority'}->{'name'} ."' fixen.";
        $utility = 4;
      }

      print "Updating task for " . $issue->{'subject'} . "\n";

      dbh()->do(<<EOSQL, {}, $title, $seconds_estimate, $status, $now, $task->{'gid'});
        UPDATE task SET title = ?, seconds_estimate = ?, status = ?, last_edit = ? WHERE gid = ?
EOSQL

      dbh()->do(<<EOSQL, {}, $task->{'id'});
        DELETE FROM task_utility WHERE task = ?
EOSQL
      dbh()->do(<<EOSQL, {}, $task->{'id'}, "0constant:" . int($utility * 1000));
        INSERT INTO task_utility (task, distribution) VALUES (?, ?)
EOSQL
    } else {
      my $issueId = $issue->{'id'};
      my $xmlDetail = XMLin(http('GET' => "$base->{'issues'}/$issueId.xml?key=$key&include=children"));
      next if($xmlDetail->{'children'});

      my $gid = create_gid();
      my $author = $issue->{'author'}->{'name'};
      my $title = "Redmine-Ticket '$issue->{'subject'}' bearbeiten";
      my $utility = $utilities{$project . '.' . $issue->{'priority'}->{'name'}};
      my $seconds_estimate = (ref $issue->{'estimated_hours'} ne 'HASH')? $issue->{'estimated_hours'} * 3600: undef;
      my $publication = PUBLICATION_PRIVATE;
      my $status = $issue->{'done_ratio'};

      next if $status == 100;

      if($status < 0 or $status >= 100) {
        $status = 0;
      }

      if(not defined $seconds_estimate) {
        $title .= ': Zeitsch채tzung';
        $seconds_estimate = 60;
      }
#    if(not defined $issue->{'assigned_to'}) {
#      $title .= ': Zuweisen';
#      $seconds_estimate = 60;
#    }

      if(not defined $utility) {
        $title = "Utilator: Redmine-Utility-Definition f체r '" . $project . '.' . $issue->{'priority'}->{'name'} ."' fixen.";
        $utility = 4;
      }

      my @validLocations;
      foreach my $loc (@{$locations{$project}}) {
        my @rows = @{dbh()->selectall_arrayref(<<EOSQL, { Slice => {} }, $loc)};
        SELECT * FROM space_active WHERE name = ?
EOSQL
        if(@rows) {
          push @validLocations, $loc;
        } else {
          $title .= "Utilator: Redmine-Locations definition needs to be fixed: $loc";
          $seconds_estimate = 60;
        }
      }

      print "Creating task for " . $issue->{'subject'} . "\n";

      dbh()->do(<<EOSQL, {}, $gid, $author, $title, $seconds_estimate, 0, $status, $publication, $now);
        INSERT INTO task (gid, author, title, seconds_estimate, seconds_taken, status, publication, last_edit) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
EOSQL

      my $id = dbh()->selectall_arrayref(<<EOSQL, { Slice => {} }, $gid)->[0]->{'id'};
        SELECT id FROM task WHERE gid = ?
EOSQL

      dbh()->do(<<EOSQL, {}, $id, "0constant:" . int($utility * 1000));
        INSERT INTO task_utility (task, distribution) VALUES (?, ?)
EOSQL

      dbh()->do(<<EOSQL, {}, $id, $externalBase . '/' . $issue->{'id'});
        INSERT INTO task_external (task, external) VALUES (?, ?)
EOSQL

      foreach my $loc (@validLocations) {
        dbh()->do(<<EOSQL, {}, $gid, $loc);
        INSERT INTO task_likelyhood_space (task, distribution) VALUES ((SELECT id FROM task WHERE gid = ?), ?)
EOSQL
      }
    }
  }
} else {
  die help();
}

sub help {
  my $ret = <<EOTXT;
./redmine <project> <action> ...
  pull - query the redmine for assigned tasks no todo exists for

valid projects:
EOTXT

  foreach my $project (keys %names) {
    $ret .= "  " . $project . " => " . $names{$project} . "\n";
  }

  return $ret;
}

sub verifyCert {
  my $sslLibThinksOk = $_[1];

  my $sha512 = sha512_hex(Net::SSLeay::PEM_get_string_X509($_[4]));

  # warn $sha512;
  # modify this line depending on how you would like your certificate to be checked
  return $goodCerts{$sha512} and $sslLibThinksOk;
}

sub http {
  my ($method, $url) = @_;

  # print "$method $url\n";

  my $req = HTTP::Request->new($method => $url);
  my $res = $ua->request($req);
  die $res->status_line() . IO::Socket::SSL::errstr() . ' @ ' . $url if(not $res->is_success());

  return $res->content();
}
